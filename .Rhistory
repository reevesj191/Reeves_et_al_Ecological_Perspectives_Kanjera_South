"Avg. % Mass Lost" = round(mean(fixedpredict * 100)),
"Max. % Mass Lost" = round(max(fixedpredict * 100)))
write.csv(cores_table, "Figures and Tables/Table_2_HUMEV-D-20.csv")
write.csv(cores_table, "../Figures and Tables/Table_2_HUMEV-D-20.csv")
kable(cores_table, caption = "")
kable(cores_table, caption = "A summary of the cores included in this analysis")
## Read Cores
cores <- read.csv("../Data/kjs_cores_2021.csv", stringsAsFactors = FALSE)
## Re-Order Factor Levels
cores$DeLaTorre.Typology <- ordered(cores$DeLaTorre.Typology,
levels = c("unifacial simple partial",
"unidirectional abrupt unipolar",
"unidirectional abrupt bipolar",
"bidirectional abrupt",
"bifacial partial",
"unifacial centripetal",
"bifacial centripetal",
"polyhedral",
"multifacial irregular"))
cores$rm.provenance <- "Distant"
cores$rm.provenance[cores$RM %in% c("HLI", "FNY", "HPH")] <- "Local"
cores$RM <- factor(cores$RM, levels = c("BBA", "BFE", "BQU", "NYR","OGR", "NYC", "HLI", "HPH", "FNY"))
cores$fixedpredict <- core.redux.kjs(cores, vars = c("Accession.Number", "FlakScars", "Interactions", "AverageAngle"))
cores_table <- cores %>%
group_by(RM) %>%
dplyr::summarise("N" = dplyr::n(),
"Avg. Length" = round(mean(Axis1),2),
"Avg. Width" = round(mean(Axis2),2),
"Avg. Thick" = round(mean(Axis3),2),
"Avg. Mass (g)" = round(mean(Mass),3),
"Avg. N flake scars" = round(mean(FlakScars, na.rm = TRUE)),
"Avg. Exploitation Surfaces" = round(mean(ExploitationSurfaces, na.rm = TRUE)),
"Avg. Surface Interactions" = round(mean(Interactions, na.rm = TRUE)),
"Min. % Mass Lost" = round(min(fixedpredict * 100)),
"Avg. % Mass Lost" = round(mean(fixedpredict * 100)),
"Max. % Mass Lost" = round(max(fixedpredict * 100)))
write.csv(cores_table, "../Figures and Tables/Table_2_HUMEV-D-20.csv")
kable(cores_table, caption = "A summary of the cores included in this analysis \\ref{table2}")
library(png)
library(grid)
figure_02 = readPNG("../Figures and Tables/Figure_2.png")
g <- rasterGrob(figure_02, interpolate=TRUE)
ggplot(NULL, aes(NULL, NULL)) + geom_blank() + xlab('') + ylab('') +
annotation_custom(g, xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf)+
theme(panel.background = element_blank())
figure_02
kabel(flakes_table)
## Read Cores
cores <- read.csv("../Data/kjs_cores_2021.csv", stringsAsFactors = FALSE)
## Re-Order Factor Levels
cores$DeLaTorre.Typology <- ordered(cores$DeLaTorre.Typology,
levels = c("unifacial simple partial",
"unidirectional abrupt unipolar",
"unidirectional abrupt bipolar",
"bidirectional abrupt",
"bifacial partial",
"unifacial centripetal",
"bifacial centripetal",
"polyhedral",
"multifacial irregular"))
## Add Raw Material Provenance Data
cores$rm.provenance <- "Distant"
cores$rm.provenance[cores$RM %in% c("HLI", "FNY", "HPH")] <- "Local"
cores$RM <- factor(cores$RM, levels = c("BBA", "BFE", "BQU", "NYR","OGR", "NYC", "HLI", "HPH", "FNY"))
## Calculate Core Redux
cores$fixedpredict <- core.redux.kjs(cores, vars = c("Accession.Number", "FlakScars", "Interactions", "AverageAngle"))
cores_table <- cores %>%
group_by(RM) %>%
dplyr::summarise("N" = dplyr::n(),
"Avg. Length" = round(mean(Axis1),2),
"Avg. Width" = round(mean(Axis2),2),
"Avg. Thick" = round(mean(Axis3),2),
"Avg. Mass (g)" = round(mean(Mass),3),
"Avg. N flake scars" = round(mean(FlakScars)),
"Avg. Exploitation Surfaces" = round(mean(ExploitationSurfaces)),
"Avg. Surface Interactions" = round(mean(Interactions)),
"Min. % Mass Lost" = round(min(fixedpredict * 100)),
"Avg. % Mass Lost" = round(mean(fixedpredict * 100)),
"Max. % Mass Lost" = round(max(fixedpredict * 100)))
write.csv(cores_table, "../Figures and Tables/Table_2_HUMEV-D-20.csv")
kable(cores_table, caption = "A summary of the cores included in this analysis \\ref{table2}")
flakes_table <- flakes_table %>% rename(RM = "Raw Material")
flakes_table <- flakes %>% dplyr::group_by(Raw.Material) %>%
dplyr::summarise("N" = dplyr::n(),
"Avg. Length" = round(mean(Length),2),
"Avg. Width" = round(mean(Length),2),
"Avg. Mass (g)" = round(mean(Mass),3),
"Avg. N of platform facets" = round(mean(Platform.facets)),
"Avg. N of dorsal scars" = round(mean(N.Flake.Scars)),
"Avg. N of scar dir" = round(mean(Flake.scar.direction)),
"Avg. percent cortex" = round(mean(Percent.Cortex),2),
"Avg. Flake Seq" = round(mean(flake.seq)),
"Avg. Edge to Mass Ratio" = round(mean(PerMass, na.rm = TRUE),2))
flakes_table <- flakes_table %>% rename(RM = "Raw Material")
flakes_table <- flakes_table %>% rename(RM = Raw.Material)
kabel(flakes_table)
flakes_table <- flakes %>% dplyr::group_by(Raw.Material) %>%
dplyr::summarise("N" = dplyr::n(),
"Avg. Length" = round(mean(Length),2),
"Avg. Width" = round(mean(Length),2),
"Avg. Mass (g)" = round(mean(Mass),3),
"Avg. N of platform facets" = round(mean(Platform.facets)),
"Avg. N of dorsal scars" = round(mean(N.Flake.Scars)),
"Avg. N of scar dir" = round(mean(Flake.scar.direction)),
"Avg. percent cortex" = round(mean(Percent.Cortex),2),
"Avg. Flake Seq" = round(mean(flake.seq)),
"Avg. Edge to Mass Ratio" = round(mean(PerMass, na.rm = TRUE),2))
kabel(flakes_table)
kable(flakes_table)
flakes_table <- flakes_table %>% rename(RM = Raw.Material)
kable(flakes_table)
flakes <- read.csv("Data/kjs_flakes_2021.csv")
flakes <- read.csv("../Data/kjs_flakes_2021.csv")
flakes$Raw.Material <- factor(toupper(flakes$Raw.Material), levels = c("BBA", "BFE", "BQU", "NYR","OGR", "NYC", "HLI", "HPH", "FNY"))
flakes$rm.provenance <- "Distant"
flakes$rm.provenance[flakes$Raw.Material %in% c("HLI", "FNY", "HPH")] <- "Local"
flakes$flake.seq <- flake.sequence(flakes, c("ID",
"Length",
"Width",
"N.Flake.Scars",
"Flake.scar.direction",
"Platform.facets",
"Percent.Cortex"))
flakes_table <- flakes %>% dplyr::group_by(Raw.Material) %>%
dplyr::summarise("N" = dplyr::n(),
"Avg. Length" = round(mean(Length),2),
"Avg. Width" = round(mean(Length),2),
"Avg. Mass (g)" = round(mean(Mass),3),
"Avg. N of platform facets" = round(mean(Platform.facets)),
"Avg. N of dorsal scars" = round(mean(N.Flake.Scars)),
"Avg. N of scar dir" = round(mean(Flake.scar.direction)),
"Avg. percent cortex" = round(mean(Percent.Cortex),2),
"Avg. Flake Seq" = round(mean(flake.seq)),
"Avg. Edge to Mass Ratio" = round(mean(PerMass, na.rm = TRUE),2))
flakes_table <- flakes_table %>% rename(RM = Raw.Material)
kable(flakes_table, caption = "Table 3: A summary of the flakes included in this analysis. \\label{table3}")
flakes_table <- flakes_table %>% rename(RM = Raw.Material)
write.csv(flakes_table, "../Figures and Tables/Table_3_HUMEV-D-20.csv")
a <- ggplot(cores, aes(x = RM, y = fixedpredict, fill = rm.provenance)) +
geom_boxplot(show.legend = FALSE) +
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
scale_y_continuous(limits = c(0,1))+
labs(x = "Raw Material", y = "Reduction intensity (% Mass Lost)") +
theme(panel.background = element_rect(color = "black", fill = "white"))
b <- ggplot(cores, aes(x = rm.provenance, y = fixedpredict, fill = rm.provenance)) +
geom_boxplot(show.legend = FALSE) +
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
scale_y_continuous(limits = c(0,1))+
labs(x = "Raw Material Provenance", y = "Reduction intensity (% Mass Lost)")+
theme(panel.background = element_rect(color = "black", fill = "white"))
c <- arrangeGrob(a,b, ncol = 2)
ggsave(filename = "Figures and Tables/Figure 3.png", c, height = 3, width = 6, units = "in")
c
grid.arrange(a,b, ncol = 2)
a <- ggplot(cores, aes(x = RM, y = fixedpredict, fill = rm.provenance)) +
geom_boxplot(show.legend = FALSE) +
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
scale_y_continuous(limits = c(0,1))+
labs(x = "Raw Material", y = "Reduction intensity (% Mass Lost)") +
theme(panel.background = element_rect(color = "black", fill = "white"))
b <- ggplot(cores, aes(x = rm.provenance, y = fixedpredict, fill = rm.provenance)) +
geom_boxplot(show.legend = FALSE) +
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
scale_y_continuous(limits = c(0,1))+
labs(x = "Raw Material Provenance", y = "Reduction intensity (% Mass Lost)")+
theme(panel.background = element_rect(color = "black", fill = "white"))
#### For saving the figure
#c <- arrangeGrob(a,b, ncol = 2)
#ggsave(filename = "../Figures and Tables/Figure 3.png", c, height = 3, width = 6, units = "in")
#### Visualizing the Figure
grid.arrange(a,b, ncol = 2)
res <- wilcox.test(cores$fixedpredict~cores$rm.provenance)
res$statistic
res$statistic[1]
as.numeric(res$statistic)
as.numeric(res$statistic)
as.numeric(res$statistic)
flakes <- read.csv("../Data/kjs_flakes_2021.csv")
flakes$Raw.Material <- factor(toupper(flakes$Raw.Material), levels = c("BBA", "BFE", "BQU", "NYR","OGR", "NYC", "HLI", "HPH", "FNY"))
flakes$rm.provenance <- "Distant"
flakes$rm.provenance[flakes$Raw.Material %in% c("HLI", "FNY", "HPH")] <- "Local"
flakes$flake.seq <- flake.sequence(flakes, c("ID",
"Length",
"Width",
"N.Flake.Scars",
"Flake.scar.direction",
"Platform.facets",
"Percent.Cortex"))
flakes_table <- flakes %>% dplyr::group_by(Raw.Material) %>%
dplyr::summarise("N" = dplyr::n(),
"Avg. Length" = round(mean(Length),2),
"Avg. Width" = round(mean(Length),2),
"Avg. Mass (g)" = round(mean(Mass),3),
"Avg. N of platform facets" = round(mean(Platform.facets)),
"Avg. N of dorsal scars" = round(mean(N.Flake.Scars)),
"Avg. N of scar dir" = round(mean(Flake.scar.direction)),
"Avg. percent cortex" = round(mean(Percent.Cortex),2),
"Avg. Flake Seq" = round(mean(flake.seq)),
"Avg. Edge to Mass Ratio" = round(mean(PerMass, na.rm = TRUE),2))
flakes_table <- flakes_table %>% rename(RM = Raw.Material)
kable(flakes_table, caption = "Table 3: A summary of the flakes included in this analysis. \\label{table3}")
write.csv(flakes_table, "../Figures and Tables/Table_3_HUMEV-D-20.csv")
## Read Cores
cores <- read.csv("../Data/kjs_cores_2021.csv", stringsAsFactors = FALSE)
## Re-Order Factor Levels
cores$DeLaTorre.Typology <- ordered(cores$DeLaTorre.Typology,
levels = c("unifacial simple partial",
"unidirectional abrupt unipolar",
"unidirectional abrupt bipolar",
"bidirectional abrupt",
"bifacial partial",
"unifacial centripetal",
"bifacial centripetal",
"polyhedral",
"multifacial irregular"))
## Add Raw Material Provenance Data
cores$rm.provenance <- "Distant"
cores$rm.provenance[cores$RM %in% c("HLI", "FNY", "HPH")] <- "Local"
cores$RM <- factor(cores$RM, levels = c("BBA", "BFE", "BQU", "NYR","OGR", "NYC", "HLI", "HPH", "FNY"))
## Calculate Core Redux
cores$fixedpredict <- core.redux.kjs(cores, vars = c("Accession.Number", "FlakScars", "Interactions", "AverageAngle"))
cores_table <- cores %>%
group_by(RM) %>%
dplyr::summarise("N" = dplyr::n(),
"Avg. Length" = round(mean(Axis1),2),
"Avg. Width" = round(mean(Axis2),2),
"Avg. Thick" = round(mean(Axis3),2),
"Avg. Mass (g)" = round(mean(Mass),3),
"Avg. N flake scars" = round(mean(FlakScars)),
"Avg. Exploitation Surfaces" = round(mean(ExploitationSurfaces)),
"Avg. Surface Interactions" = round(mean(Interactions)),
"Min. % Mass Lost" = round(min(fixedpredict * 100)),
"Avg. % Mass Lost" = round(mean(fixedpredict * 100)),
"Max. % Mass Lost" = round(max(fixedpredict * 100)))
write.csv(cores_table, "../Figures and Tables/Table_2_HUMEV-D-20.csv")
kable(cores_table, caption = "A summary of the cores included in this analysis \\ref{table2}")
flake.res <- wilcox.test(flakes$flake.seq~
flakes$rm.provenance)
as.numberic(flake.res$statistic)
as.numeric(flake.res$statistic)
ggplot(flakes, aes(x = Raw.Material, y = flake.seq, fill = rm.provenance)) +
geom_boxplot()+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
labs(x = "Raw Material", y = "Flake Sequence")+
guides(fill=guide_legend(title="Raw Material Provenance")) +
theme(panel.background = element_rect(color = "black", fill = "white"),
legend.position = "top")
## For saving the figure
#ggsave(filename = "Figures and Tables/Figure 4.png",height = 4, width = 4, units = "in")
kruskal.res <- kruskal.test(cores$fixedpredict, cores$DeLaTorre.Typology)
kruskal.res
kruskal.res$statistic
fisher.res <- fisher.test(cores.table, simulate.p.value = TRUE)
cores.table <- table(cores$rm.provenance,cores$DeLaTorre.Typology)
fisher.res <- fisher.test(cores.table, simulate.p.value = TRUE)
fisher.res$p.value
fisher.p <- round(fisher.res$p.value)
fisher.p
fisher.p <- round(fisher.res$p.value,4)
fisher.p
fisher.p <- round(fisher.res$p.value,3)
fisher.p
fisher.p <- round(fisher.res$p.value,4)
fisher.p
fisher.p
kr.stat <- as.numeric(kruskal.res$statistic)
kr.stat
kr.stat <- round(as.numeric(kruskal.res$statistic),2)
kr.stat
fisher.p <- round(fisher.res$p.value,4)
fisher.p
kruskal.res
fisher.p <- round(fisher.res$p.value,4)
fisher.p
kr.stat
grid.arrange(rm.tech, redux.tech,ncol=2)
redux.tech<-ggplot(cores, aes(x = DeLaTorre.Typology, y = fixedpredict, fill = DeLaTorre.Typology)) +
geom_boxplot() +
scale_fill_brewer(type = "div", palette = 6, direction = -1) +
labs(x = "Core Reduction Strategy", y = "Reduction intensity (% Mass Lost)")+
guides(fill=guide_legend(title="Provenance")) +
scale_x_discrete(labels= c("USP", "UAU", "UABI", "BA", "BAP", "UC", "BC","Poly", "MFI"))+
theme(panel.background = element_rect(color = "black", fill = "white"),
legend.position = "none",
axis.text.x = element_text(vjust = 1, hjust = 1, angle = 70))
rm.tech <- ggplot(cores, aes(x =RM , fill = DeLaTorre.Typology)) +
geom_bar(position = "fill") +
scale_fill_brewer(type = "div", palette = 6, direction = -1) +
labs(x = "Raw Material", y = "Relative Frequency") +
theme(panel.background = element_rect(color = "black", fill = "white"),
legend.position = "none")
## Saving figure
#c <- arrangeGrob(rm.tech, redux.tech,ncol=2)
#ggsave(filename = "Figures and Tables/Figure 5.png",c ,height = 4, width = 6.5, units = "in")
grid.arrange(rm.tech, redux.tech,ncol=2)
redux.tech<-ggplot(cores, aes(x = DeLaTorre.Typology, y = fixedpredict, fill = DeLaTorre.Typology)) +
geom_boxplot() +
scale_fill_brewer(type = "div", palette = 6, direction = -1) +
labs(x = "Core Reduction Strategy", y = "Reduction intensity (% Mass Lost)")+
guides(fill=guide_legend(title="Provenance")) +
scale_x_discrete(labels= c("USP", "UAU", "UABI", "BA", "BAP", "UC", "BC","Poly", "MFI"))+
theme(panel.background = element_rect(color = "black", fill = "white"),
legend.position = "none",
axis.text.x = element_text(vjust = 1, hjust = 1, angle = 70))
rm.tech <- ggplot(cores, aes(x =RM , fill = DeLaTorre.Typology)) +
geom_bar(position = "fill") +
scale_fill_brewer(type = "div", palette = 6, direction = -1) +
labs(x = "Raw Material", y = "Relative Frequency") +
theme(panel.background = element_rect(color = "black", fill = "white"),
legend.position = "none")
## Saving figure
#c <- arrangeGrob(rm.tech, redux.tech,ncol=2)
#ggsave(filename = "Figures and Tables/Figure 5.png",c ,height = 4, width = 6.5, units = "in")
grid.arrange(rm.tech, redux.tech,ncol=2)
e2m.res <- wilcox.test(flakes$PerMass~
flakes$rm.provenance)
e2m.res
e2m.stat <- as.numer(e2m.res)
e2m.stat <- as.numeric(e2m.res)
e2m.stat <- as.numeric(e2m.res$statistic)
e2m.stat
flakes <- subset(flakes, Raw.Material != "OGR")
e2m.res <- wilcox.test(flakes$PerMass~
flakes$rm.provenance)
e2m.stat <- as.numeric(e2m.res$statistic)
e2m.stat
191290
e2m.stat
a <-ggplot(data=flakes[flakes$Raw.Material!="OGR",], aes(x=Raw.Material, y= PerMass, fill=rm.provenance))+
geom_jitter()+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
theme(legend.position = "top",
panel.background = element_rect(color = "black", fill = "white")) +
geom_violin()+
ylab("Edge to Mass Ratio mm/log(grams)")+
labs(fill = "Provenance")+
xlab("Raw Materials")
b <- ggplot(flakes, aes(x = flake.seq, y = PerMass, color = rm.provenance))+
geom_point()+
scale_color_manual(values = c("#E69F00", "#56B4E9"))+
ylab("Edge to Mass Ratio mm/log(grams)")+
xlab("Flake Sequence")+
labs(color = "Provenance") +
theme(panel.background = element_rect(color = "black", fill = "white"),
legend.position = "top",
axis.title.y = element_text(color = "white"),
axis.text.y = element_text(color = "white"))
c<- arrangeGrob(a, b, ncol =2)
grid.arrange(a,b, ncol = 2)
a <-ggplot(data=flakes[flakes$Raw.Material!="OGR",], aes(x=Raw.Material, y= PerMass, fill=rm.provenance))+
geom_jitter()+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
theme(legend.position = "top",
panel.background = element_rect(color = "black", fill = "white")) +
geom_violin()+
ylab("Edge to Mass Ratio mm/log(grams)")+
labs(fill = "Provenance")+
xlab("Raw Materials")
b <- ggplot(flakes[flakes$Raw.Material!="OGR",], aes(x = flake.seq, y = PerMass, color = rm.provenance))+
geom_point()+
scale_color_manual(values = c("#E69F00", "#56B4E9"))+
ylab("Edge to Mass Ratio mm/log(grams)")+
xlab("Flake Sequence")+
labs(color = "Provenance") +
theme(panel.background = element_rect(color = "black", fill = "white"),
legend.position = "top",
axis.title.y = element_text(color = "white"),
axis.text.y = element_text(color = "white"))
### For Saving Figure
#c<- arrangeGrob(a, b, ncol =2)
#ggsave(filename = "Figures and Tables/Figure 6.png",c ,height = 4, width = 6.5, units = "in")
grid.arrange(a,b, ncol = 2)
as.numeric(res$statistic)
e2m.stat
as.numeric(core.res$statistic)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
tiff_figures = TRUE)
library(ggplot2)
library(grid)
library(gridExtra)
library(dplyr)
library(raster)
library(ggplot2)
library(ggsn)
library(ggrepel)
library(sf)
library(ggnewscale)
library(knitr)
source("../Redux_Functions.R")
dem <- raster("../Data/Figure_1_Data/Homa_Penninsula_DEM_30m2.tif")
dem[dem$Homa_Penninsula_DEM_30m2 <= 1134] <- NA
slope <- raster::terrain(dem, opt = "slope")
aspect <- terrain(dem, opt = "aspect")
dem <- data.frame(rasterToPoints(dem))
hs <- hillShade(slope = slope,
aspect = aspect,
angle = 50,
direction = 315,
normalize = TRUE)
hs <- data.frame(rasterToPoints(hs))
water <- read_sf("../Data/Figure_1_Data/ke_major-rivers.shp")
kjs <- read_sf("../Data/Figure_1_Data/KJS_WSG_84.shp")
rivers2<-read_sf("../Data/Figure_1_Data/Rivers_homa_WGS2.shp")
fault <- read_sf("../Data/Figure_1_Data/SamangaFault_WGS.shp")
st_geometry(kjs) <- NULL
ggplot()+
geom_raster(data = hs,aes(x=x, y=y, fill = layer),show.legend = FALSE)+
scale_fill_gradientn(colours = grey.colors(100,start = .5, end = 0))+
new_scale_fill()+
geom_raster(data = dem[dem$Homa_Penninsula_DEM_30m2 > 1134 & dem$Homa_Penninsula_DEM_30m2 < 2000,],
aes(x=x,y=y,fill = Homa_Penninsula_DEM_30m2),alpha = .4, inherit.aes = FALSE)+
geom_sf(data = rivers2, color = "dodger blue2", alpha = .5)+
geom_sf(data = fault,linetype =2) +
geom_sf_text(data = fault, aes(label = "Samanga Fault"), angle = 47, nudge_y = -.015)+
scale_fill_gradientn(colours = terrain.colors(100), "Elevation (m)")+
geom_point(data = kjs, aes(x= X, y = Y)) +
geom_label_repel(data= kjs, aes(x = X, y = Y,label = Local),
box.padding   = 1,
point.padding = .5,
segment.color = 'black',
color = "black")+
north(location = "bottomleft", symbol = 10, x.min = 34.43,x.max = 34.9, y.min = -0.525, y.max = -.27195)+
scalebar(location = "bottomleft",dist_unit = "km",dist = 4, x.min = 34.44,x.max = 34.9, y.min = -0.528, y.max = -.275,
transform = TRUE,st.dist = .025) +
scale_x_continuous(limits = c(34.42,34.8), expand = c(0,0))+
scale_y_continuous(limits = c(-0.55,-.275), expand = c(0,0))+
theme(panel.background = element_rect(fill = "dodger blue1"),
panel.grid = element_blank(),
panel.spacing = unit(1, "cm"),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
#ggsave("../Figures and Tables/Figure_1.png", width = 7 ,height = 5,units = "in")
table1 <- read.csv("../Figures and Tables/Table_1_HUMEV-D-20.csv")
kable(table1, col.names = c("Raw Material", "Abreviation", "Origin", "Provenance"), caption = "A list of rock types found at Kanjera South included in this analysis \\label{table1}")
library(png)
library(grid)
figure_02 = readPNG("../Figures and Tables/Figure_2.png")
g <- rasterGrob(figure_02, interpolate=TRUE)
ggplot(NULL, aes(NULL, NULL)) + geom_blank() + xlab('') + ylab('') +
annotation_custom(g, xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf)+
theme(panel.background = element_blank())
## Read Cores
cores <- read.csv("../Data/kjs_cores_2021.csv", stringsAsFactors = FALSE)
## Re-Order Factor Levels
cores$DeLaTorre.Typology <- ordered(cores$DeLaTorre.Typology,
levels = c("unifacial simple partial",
"unidirectional abrupt unipolar",
"unidirectional abrupt bipolar",
"bidirectional abrupt",
"bifacial partial",
"unifacial centripetal",
"bifacial centripetal",
"polyhedral",
"multifacial irregular"))
## Add Raw Material Provenance Data
cores$rm.provenance <- "Distant"
cores$rm.provenance[cores$RM %in% c("HLI", "FNY", "HPH")] <- "Local"
cores$RM <- factor(cores$RM, levels = c("BBA", "BFE", "BQU", "NYR","OGR", "NYC", "HLI", "HPH", "FNY"))
## Calculate Core Redux
cores$fixedpredict <- core.redux.kjs(cores, vars = c("Accession.Number", "FlakScars", "Interactions", "AverageAngle"))
cores_table <- cores %>%
group_by(RM) %>%
dplyr::summarise("N" = dplyr::n(),
"Avg. Length" = round(mean(Axis1),2),
"Avg. Width" = round(mean(Axis2),2),
"Avg. Thick" = round(mean(Axis3),2),
"Avg. Mass (g)" = round(mean(Mass),3),
"Avg. N flake scars" = round(mean(FlakScars)),
"Avg. Exploitation Surfaces" = round(mean(ExploitationSurfaces)),
"Avg. Surface Interactions" = round(mean(Interactions)),
"Min. % Mass Lost" = round(min(fixedpredict * 100)),
"Avg. % Mass Lost" = round(mean(fixedpredict * 100)),
"Max. % Mass Lost" = round(max(fixedpredict * 100)))
write.csv(cores_table, "../Figures and Tables/Table_2_HUMEV-D-20.csv")
kable(cores_table, caption = "A summary of the cores included in this analysis \\label{table2}")
flakes <- read.csv("../Data/kjs_flakes_2021.csv")
flakes$Raw.Material <- factor(toupper(flakes$Raw.Material), levels = c("BBA", "BFE", "BQU", "NYR","OGR", "NYC", "HLI", "HPH", "FNY"))
flakes$rm.provenance <- "Distant"
flakes$rm.provenance[flakes$Raw.Material %in% c("HLI", "FNY", "HPH")] <- "Local"
flakes$flake.seq <- flake.sequence(flakes, c("ID",
"Length",
"Width",
"N.Flake.Scars",
"Flake.scar.direction",
"Platform.facets",
"Percent.Cortex"))
flakes_table <- flakes %>% dplyr::group_by(Raw.Material) %>%
dplyr::summarise("N" = dplyr::n(),
"Avg. Length" = round(mean(Length),2),
"Avg. Width" = round(mean(Length),2),
"Avg. Mass (g)" = round(mean(Mass),3),
"Avg. N of platform facets" = round(mean(Platform.facets)),
"Avg. N of dorsal scars" = round(mean(N.Flake.Scars)),
"Avg. N of scar dir" = round(mean(Flake.scar.direction)),
"Avg. percent cortex" = round(mean(Percent.Cortex),2),
"Avg. Flake Seq" = round(mean(flake.seq)),
"Avg. Edge to Mass Ratio" = round(mean(PerMass, na.rm = TRUE),2))
flakes_table <- flakes_table %>% rename(RM = Raw.Material)
kable(flakes_table, caption = "A summary of the flakes included in this analysis. \\label{table3}")
write.csv(flakes_table, "../Figures and Tables/Table_3_HUMEV-D-20.csv")
core.res <- wilcox.test(cores$fixedpredict~cores$rm.provenance)
flake.res <- wilcox.test(flakes$flake.seq~
flakes$rm.provenance)
as.numeric(core.res$statistic)
as.numeric(flake.res$statistic)
fisher.p
fisher.res
kr.stat
e2m.stat
